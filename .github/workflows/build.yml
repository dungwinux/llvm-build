name: LLVM CICD

on: [push]

# Largely based on build_llvm_release.bat (https://github.com/llvm/llvm-project)

env:
  LLVM_SRC: ${{ github.workspace }}\llvm-project
  LIBXML: ${{ github.workspace }}/libxmlbuild/install
  BUILD_COMPILE_FLAGS: -DLIBXML_STATIC -march=skylake -mtune=skylake
  STAGE0_BIN_DIR: ${{ github.workspace }}\stage0\bin
jobs:
  build:
    runs-on: windows-latest
    env:
      CMAKE_FLAGS: >-
        -GNinja
        -DCMAKE_BUILD_TYPE=Release
        -DLLVM_ENABLE_ASSERTIONS=OFF
        -DLLVM_INSTALL_TOOLCHAIN_ONLY=ON
        -DLLVM_TARGETS_TO_BUILD="AArch64;ARM;X86;WebAssembly;NVPTX"
        -DLLVM_BUILD_LLVM_C_DYLIB=ON
        -DPython3_FIND_REGISTRY=NEVER
        -DLLDB_RELOCATABLE_PYTHON=1
        -DLLDB_EMBED_PYTHON_HOME=OFF
        -DCMAKE_CL_SHOWINCLUDES_PREFIX="Note: including file: "
        -DLLVM_ENABLE_LIBXML2=FORCE_ON
        -DLLDB_ENABLE_LIBXML2=OFF
        -DCLANG_ENABLE_LIBXML2=OFF
        -DCMAKE_C_FLAGS="-DLIBXML_STATIC"
        -DCMAKE_CXX_FLAGS="-DLIBXML_STATIC"
        -DCMAKE_LINKER=lld-link.exe
        -DLLVM_ENABLE_RPMALLOC=ON
        -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;lld;lldb;openmp"
        -DLLVM_ENABLE_RUNTIMES="compiler-rt;openmp"
        -DLIBXML2_INCLUDE_DIR=${{ github.workspace }}/libxmlbuild/install/include/libxml2
        -DLIBXML2_LIBRARIES=${{ github.workspace }}/libxmlbuild/install/lib/libxml2s.lib
        -DCOMPILER_RT_BUILD_PROFILE=OFF
        -DCOMPILER_RT_BUILD_SANITIZERS=OFF
        -DLLVM_INCLUDE_BENCHMARKS=OFF
        -DLLVM_INCLUDE_TESTS=OFF
        -DLLVM_BUILD_TESTS=OFF
      BOOTSTRAP_CMAKE_FLAGS: >-
        -DCMAKE_C_FLAGS="-DLIBXML_STATIC -march=skylake -mtune=skylake"
        -DCMAKE_CXX_FLAGS="-DLIBXML_STATIC -march=skylake -mtune=skylake"
        -DCMAKE_C_COMPILER=${{ github.workspace }}/stage0/bin/clang-cl.exe
        -DCMAKE_CXX_COMPILER=${{ github.workspace }}/stage0/bin/clang-cl.exe
        -DCMAKE_LINKER=${{ github.workspace }}/stage0/bin/lld-link.exe
        -DCMAKE_AR=${{ github.workspace }}/stage0/bin/llvm-lib.exe
        -DCMAKE_RC=${{ github.workspace }}/stage0/bin/llvm-windres.exe
      PROFILE: ${{ github.workspace }}/profile.profdata
    steps:
      - uses: actions/checkout@v4
      - uses: TheMrMilchmann/setup-msvc-dev@v3
        with:
          arch: x64
          uwp: false
          spectre: true
      - name: Install other buildtools
        run: choco install ninja gnuwin32-coreutils.install curl
      - name: Install libxml2
        id: cache-libxml2
        uses: actions/cache@v4
        with:
          path: libxmlbuild
          key: ${{ runner.os }}-libxmlbuild
      - name: Build libxml2
        shell: cmd
        if: steps.cache-libxml2.outputs.cache-hit != 'true'
        run: |
          curl -O https://gitlab.gnome.org/GNOME/libxml2/-/archive/v2.9.12/libxml2-v2.9.12.tar.gz || exit /b 1
          tar zxf libxml2-v2.9.12.tar.gz
          mkdir libxmlbuild
          cd libxmlbuild
          cmake -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install ^
            -DBUILD_SHARED_LIBS=OFF -DLIBXML2_WITH_C14N=OFF -DLIBXML2_WITH_CATALOG=OFF ^
            -DLIBXML2_WITH_DEBUG=OFF -DLIBXML2_WITH_DOCB=OFF -DLIBXML2_WITH_FTP=OFF ^
            -DLIBXML2_WITH_HTML=OFF -DLIBXML2_WITH_HTTP=OFF -DLIBXML2_WITH_ICONV=OFF ^
            -DLIBXML2_WITH_ICU=OFF -DLIBXML2_WITH_ISO8859X=OFF -DLIBXML2_WITH_LEGACY=OFF ^
            -DLIBXML2_WITH_LZMA=OFF -DLIBXML2_WITH_MEM_DEBUG=OFF -DLIBXML2_WITH_MODULES=OFF ^
            -DLIBXML2_WITH_OUTPUT=ON -DLIBXML2_WITH_PATTERN=OFF -DLIBXML2_WITH_PROGRAMS=OFF ^
            -DLIBXML2_WITH_PUSH=OFF -DLIBXML2_WITH_PYTHON=OFF -DLIBXML2_WITH_READER=OFF ^
            -DLIBXML2_WITH_REGEXPS=OFF -DLIBXML2_WITH_RUN_DEBUG=OFF -DLIBXML2_WITH_SAX1=OFF ^
            -DLIBXML2_WITH_SCHEMAS=OFF -DLIBXML2_WITH_SCHEMATRON=OFF -DLIBXML2_WITH_TESTS=OFF ^
            -DLIBXML2_WITH_THREADS=ON -DLIBXML2_WITH_THREAD_ALLOC=OFF -DLIBXML2_WITH_TREE=ON ^
            -DLIBXML2_WITH_VALID=OFF -DLIBXML2_WITH_WRITER=OFF -DLIBXML2_WITH_XINCLUDE=OFF ^
            -DLIBXML2_WITH_XPATH=OFF -DLIBXML2_WITH_XPTR=OFF -DLIBXML2_WITH_ZLIB=OFF ^
            -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded ^
            ../libxml2-v2.9.12 || exit /b 1
          ninja install || exit /b 1
      - name: Clone llvm
        run: |
          git clone -b "release/20.x" --single-branch --depth=1 "https://github.com/llvm/llvm-project" llvm-project
          cd llvm-project
      # - name: bootstrap prepare
      #   shell: cmd
      #   run: |
      #     mkdir stage0
      #     cd stage0
      #     cmake %CMAKE_FLAGS:\=/% -DLLVM_TARGETS_TO_BUILD=Native %LLVM_SRC%\llvm || exit /b 1
      #     ninja || exit /b 1
      #     cd ..
      # - name: Generate profile for PGO
      #   shell: cmd
      #   run: |
      #     mkdir inst
      #     cd inst
      #     cmake %CMAKE_FLAGS:\=/% %BOOTSTRAP_CMAKE_FLAGS:\=/% ^
      #       -DLLVM_TARGETS_TO_BUILD=Native ^
      #       -DLLVM_BUILD_INSTRUMENTED=IR ^
      #       %LLVM_SRC%\llvm || exit /b 1
      #     ninja clang || ninja clang || ninja clang || exit /b 1
      #     set "INSTCLANG=%cd:\=/%/bin/clang-cl.exe"
      #     cd ..
      #     mkdir train
      #     cd train
      #     cmake %CMAKE_FLAGS:\=/% %BOOTSTRAP_CMAKE_FLAGS:\=/% ^
      #       -DCMAKE_C_COMPILER=%INSTCLANG% ^
      #       -DCMAKE_CXX_COMPILER=%INSTCLANG% ^
      #       -DLLVM_ENABLE_PROJECTS=clang ^
      #       -DLLVM_TARGETS_TO_BUILD=Native ^
      #       %LLVM_SRC%\llvm || exit /b 1
      #     del ..\instrument\profiles\*.profraw
      #     ninja tools/clang/lib/Sema/CMakeFiles/obj.clangSema.dir/Sema.cpp.obj
      #     cd ..
      #     %STAGE0_BIN_DIR%\llvm-profdata merge -output=%PROFILE:\=/% instrument\profiles\*.profraw
      - name: record version
        shell: pwsh
        run: |
          cd $env:LLVM_SRC
          "VERSION=20_$(git rev-parse --short HEAD)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - name: build
        shell: cmd
        run: |
          set filename="clang+llvm-%VERSION%-x86_64-pc-windows-msvc"
          mkdir build
          cd build
          cmake %CMAKE_FLAGS:\=/%
            -DCMAKE_C_COMPILER=clang-cl.exe ^
            -DCMAKE_CXX_COMPILER=clang-cl.exe ^
            -DCMAKE_C_FLAGS="%BUILD_COMPILE_FLAGS% -Wno-backend-plugin" ^
            -DCMAKE_CXX_FLAGS="%BUILD_COMPILE_FLAGS% -Wno-backend-plugin" ^
            -DLLVM_INSTALL_TOOLCHAIN_ONLY=OFF ^
            -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/%filename%" ^
            %LLVM_SRC%\llvm || exit /b 1
          ninja install || exit /b 1
          "${{ github.workspace }}\%filename%\bin\llvm-config.exe" --bindir || exit /b 1
          cd ..
          7z a "%filename%.7z" "%filename%"
      - name: Upload result
        uses: actions/upload-artifact@v4
        with:
          name: LLVM
          path: ${{ github.workspace }}/clang*.7z
          compression-level: 0
          if-no-files-found: error
